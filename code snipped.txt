"""目录结构
/
  a.py
  test/
    __init__.py
    b.py
"""

# /a.py
import logging
log0 = logging.getLogger()
log1 = logging.getLogger("A")
log2 = logging.getLogger(__name__)
log3 = logging.getLogger("A.B") # logging是层次继承结构，如果没有log1，则log3的parent就是root
print log0.parent, 
print log1.parent.name, log2.parent.name, log3.parent.name
from test import b
"""Output:
None
root root A
test.a
root
"""

# /test/b.py
import logging
print __name__
LOG = logging.getLogger(__name__)
print LOG.parent.name

########################################################################################
import contextlib
@contextlib.contextmanager
def a():
  print "A before"
  try:
    yield
  except:
    print "A catch Exception"
  print "A end"
 
@contextlib.contextmanager
def b():
  print "B before"
  try:
    yield
  except:
    print "B catch Exception"
  print "B end"

# contextmanager里例子，很好理解，就是直到try的作用范围的问题。
# 这个例子的风格在neutron代码中多处存在
with a(), b(): 
  print "BEGIN"
  raise Exception("ERROR")

""" Output:
A before
B before
BEGIN
B catch Exception
B end
A end
"""
